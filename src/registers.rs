pub trait SpecialFunctionRegister {
    const ADDRESS: usize;
    const RESET_VALUE: u16;
    const BIT_ADDRESSABLE: bool;
    const EXTENDED: bool;
}
macro_rules! def_bx {
    ($a:literal,$b:literal) => {
        const BIT_ADDRESSABLE: bool = $a;
        const EXTENDED: bool = $b;
    };
}

macro_rules! def_sfr {
    ($physaddr:literal($($byteaddr:literal)?) = $default:literal) => {
        const ADDRESS: usize = $physaddr;
        const RESET_VALUE: u16 = $default;
    };

    ((b) @ $($tail:tt)*) => {
        def_bx!(true,false);
        def_sfr!($($tail)*);
    };
    ((b,X) @ $($tail:tt)*) => {
        def_bx!(true,true);
        def_sfr!($($tail)*);
    };
    ((X) @ $($tail:tt)*) => {
        def_bx!(false,true);
        def_sfr!($($tail)*);
    };
    (() @ $($tail:tt)*) => {
        def_bx!(false,false);
        def_sfr!($($tail)*);
    };

    ($name:ident$($tail:tt)*) => {
        pub struct $name;

        impl SpecialFunctionRegister for $name {
            def_sfr!($($tail)*);
        }
    };
}

macro_rules! def_all_sfr {
    ($($name:ident($($flag:ident),*) @ $phy:literal($($ba:literal)?) = $def:literal)*) => {
        $(def_sfr!($name($($flag),*) @ $phy($($ba)?) = $def);)*
        pub fn sfr_addr_from_byte(byte: u8) -> Option<usize> {
            match byte {
                $($($ba => Some($phy),)?)*
                _ => None
            }
        }
        pub fn sfr_name_from_byte(byte: u8) -> Option<&'static str> {
            match byte {
                $($($ba => Some(stringify!($name)),)?)*
                _ => None
            }
        }

        pub fn init_sfr(memory: &mut [u8]) {
            let list:[(usize, u16); ${count($def)}] = [$(($phy, $def)),*];
            for (sfr, def) in list.into_iter() {
                let [b1,b2] = def.to_le_bytes();

                memory[sfr] = b1;
                memory[sfr + 1] = b2;
            }
        }
    };
}
macro_rules! def_all_esfr {
    ($($name:ident($($flag:ident),*) @ $phy:literal($($ba:literal)?) = $def:literal)*) => {
        $(def_sfr!($name($($flag),*) @ $phy($($ba)?) = $def);)*
        pub fn esfr_addr_from_byte(byte: u8) -> Option<usize> {
            match byte {
                $($($ba => Some($phy),)?)*
                _ => None
            }
        }
        pub fn esfr_name_from_byte(byte: u8) -> Option<&'static str> {
            match byte {
                $($($ba => Some(stringify!($name)),)?)*
                _ => None
            }
        }
        pub fn init_esfr(memory: &mut [u8]) {
            let list:[(usize, u16); ${count($def)}] = [$(($phy, $def)),*];
            for (esfr, def) in list.into_iter() {
                let [b1,b2] = def.to_le_bytes();

                memory[esfr] = b1;
                memory[esfr + 1] = b2;
            }
        }
    };
}

def_all_sfr!(
ADCIC(b) @ 0xFF98(0xCC) = 0x0000
ADCON(b) @ 0xFFA0(0xD0) = 0x0000
ADDAT() @ 0xFEA0(0x50) = 0x0000
ADDRSEL1() @ 0xFE18(0x0C) = 0x0000
ADDRSEL2() @ 0xFE1A(0x0D) = 0x0000
ADDRSEL3() @ 0xFE1C(0x0E) = 0x0000
ADDRSEL4() @ 0xFE1E(0x0F) = 0x0000
ADEIC(b) @ 0xFF9A(0xCD) = 0x0000
BUSCON0(b) @ 0xFF0C(0x86) = 0x0000
BUSCON1(b) @ 0xFF14(0x8A) = 0x0000
BUSCON2(b) @ 0xFF16(0x8B) = 0x0000
BUSCON3(b) @ 0xFF18(0x8C) = 0x0000
BUSCON4(b) @ 0xFF1A(0x8D) = 0x0000
CAPREL() @ 0xFE4A(0x25) = 0x0000
CC0() @ 0xFE80(0x40) = 0x0000
CC0IC(b) @ 0xFF78(0xBC) = 0x0000
CC10() @ 0xFE94(0x4A) = 0x0000
CC10IC(b) @ 0xFF8C(0xC6) = 0x0000
CC1() @ 0xFE82(0x41) = 0x0000
CC11() @ 0xFE96(0x4B) = 0x0000
CC11IC(b) @ 0xFF8E(0xC7) = 0x0000
CC12() @ 0xFE98(0x4C) = 0x0000
CC12IC(b) @ 0xFF90(0xC8) = 0x0000
CC13() @ 0xFE9A(0x4D) = 0x0000
CC13IC(b) @ 0xFF92(0xC9) = 0x0000
CC14() @ 0xFE9C(0x4E) = 0x0000
CC14IC(b) @ 0xFF94(0xCA) = 0x0000
CC15() @ 0xFE9E(0x4F) = 0x0000
CC15IC(b) @ 0xFF96(0xCB) = 0x0000
CC16() @ 0xFE60(0x30) = 0x0000
CC17() @ 0xFE62(0x31) = 0x0000
CC18() @ 0xFE64(0x32) = 0x0000
CC19() @ 0xFE66(0x33) = 0x0000
CC1IC(b) @ 0xFF7A(0xBD) = 0x0000
CC20() @ 0xFE68(0x34) = 0x0000
CC2() @ 0xFE84(0x42) = 0x0000
CC21() @ 0xFE6A(0x35) = 0x0000
CC22() @ 0xFE6C(0x36) = 0x0000
CC23() @ 0xFE6E(0x37) = 0x0000
CC24() @ 0xFE70(0x38) = 0x0000
CC25() @ 0xFE72(0x39) = 0x0000
CC26() @ 0xFE74(0x3A) = 0x0000
CC27() @ 0xFE76(0x3B) = 0x0000
CC28() @ 0xFE78(0x3C) = 0x0000
CC29() @ 0xFE7A(0x3D) = 0x0000
CC2IC(b) @ 0xFF7C(0xBE) = 0x0000
CC30() @ 0xFE7C(0x3E) = 0x0000
CC3() @ 0xFE86(0x43) = 0x0000
CC31() @ 0xFE7E(0x3F) = 0x0000
CC3IC(b) @ 0xFF7E(0xBF) = 0x0000
CC4() @ 0xFE88(0x44) = 0x0000
CC4IC(b) @ 0xFF80(0xC0) = 0x0000
CC5() @ 0xFE8A(0x45) = 0x0000
CC5IC(b) @ 0xFF82(0xC1) = 0x0000
CC6() @ 0xFE8C(0x46) = 0x0000
CC6IC(b) @ 0xFF84(0xC2) = 0x0000
CC7() @ 0xFE8E(0x47) = 0x0000
CC7IC(b) @ 0xFF86(0xC3) = 0x0000
CC8() @ 0xFE90(0x48) = 0x0000
CC8IC(b) @ 0xFF88(0xC4) = 0x0000
CC9() @ 0xFE92(0x49) = 0x0000
CC9IC(b) @ 0xFF8A(0xC5) = 0x0000
CCM0(b) @ 0xFF52(0xA9) = 0x0000
CCM1(b) @ 0xFF54(0xAA) = 0x0000
CCM2(b) @ 0xFF56(0xAB) = 0x0000
CCM3(b) @ 0xFF58(0xAC) = 0x0000
CCM4(b) @ 0xFF22(0x91) = 0x0000
CCM5(b) @ 0xFF24(0x92) = 0x0000
CCM6(b) @ 0xFF26(0x93) = 0x0000
CCM7(b) @ 0xFF28(0x94) = 0x0000
CP() @ 0xFE10(0x08) = 0xFC00
CRIC(b) @ 0xFF6A(0xB5) = 0x0000
CSP() @ 0xFE08(0x04) = 0x0000
DP2(b) @ 0xFFC2(0xE1) = 0x0000
DP3(b) @ 0xFFC6(0xE3) = 0x0000
DP4(b) @ 0xFFCA(0xE5) = 0x00
DP6(b) @ 0xFFCE(0xE7) = 0x00
DP7(b) @ 0xFFD2(0xE9) = 0x00
DP8(b) @ 0xFFD6(0xEB) = 0x00
DPP0() @ 0xFE00(0x00) = 0x0000
DPP1() @ 0xFE02(0x01) = 0x0001
DPP2() @ 0xFE04(0x02) = 0x0002
DPP3() @ 0xFE06(0x03) = 0x0003
MDC(b) @ 0xFF0E(0x87) = 0x0000
MDH() @ 0xFE0C(0x06) = 0x0000
MDL() @ 0xFE0E(0x07) = 0x0000
ONES(b) @ 0xFF1E(0x8F) = 0xFFFF
P0H(b) @ 0xFF02(0x81) = 0x00
P0L(b) @ 0xFF00(0x80) = 0x00
P1H(b) @ 0xFF06(0x83) = 0x00
P1L(b) @ 0xFF04(0x82) = 0x00
P2(b) @ 0xFFC0(0xE0) = 0x0000
P3(b) @ 0xFFC4(0xE2) = 0x0000
P4(b) @ 0xFFC8(0xE4) = 0x00
P5(b) @ 0xFFA2(0xD1) = 0x0000
P5DIDIS(b) @ 0xFFA4(0xD2) = 0x0000
P6(b) @ 0xFFCC(0xE6) = 0x00
P7(b) @ 0xFFD0(0xE8) = 0x00
P8(b) @ 0xFFD4(0xEA) = 0x00
PECC0() @ 0xFEC0(0x60) = 0x0000
PECC1() @ 0xFEC2(0x61) = 0x0000
PECC2() @ 0xFEC4(0x62) = 0x0000
PECC3() @ 0xFEC6(0x63) = 0x0000
PECC4() @ 0xFEC8(0x64) = 0x0000
PECC5() @ 0xFECA(0x65) = 0x0000
PECC6() @ 0xFECC(0x66) = 0x0000
PECC7() @ 0xFECE(0x67) = 0x0000
PSW(b) @ 0xFF10(0x88) = 0x0000
PW0() @ 0xFE30(0x18) = 0x0000
PW1() @ 0xFE32(0x19) = 0x0000
PW2() @ 0xFE34(0x1A) = 0x0000
PW3() @ 0xFE36(0x1B) = 0x0000
PWMCON0(b) @ 0xFF30(0x98) = 0x0000
PWMCON1(b) @ 0xFF32(0x99) = 0x0000
S0BG() @ 0xFEB4(0x5A) = 0x0000
S0CON(b) @ 0xFFB0(0xD8) = 0x0000
S0EIC(b) @ 0xFF70(0xB8) = 0x0000
S0RBUF() @ 0xFEB2(0x59) = 0x0000
S0RIC(b) @ 0xFF6E(0xB7) = 0x0000
S0TBUF() @ 0xFEB0(0x58) = 0x0000
S0TIC(b) @ 0xFF6C(0xB6) = 0x0000
SP() @ 0xFE12(0x09) = 0xFC00
SSCCON(b) @ 0xFFB2(0xD9) = 0x0000
SSCEIC(b) @ 0xFF76(0xBB) = 0x0000
SSCRIC(b) @ 0xFF74(0xBA) = 0x0000
SSCTIC(b) @ 0xFF72(0xB9) = 0x0000
STKOV() @ 0xFE14(0x0A) = 0xFA00
STKUN() @ 0xFE16(0x0B) = 0xFC00
SYSCON(b) @ 0xFF12(0x89) = 0x0000
T0() @ 0xFE50(0x28) = 0x0000
T01CON(b) @ 0xFF50(0xA8) = 0x0000
T0IC(b) @ 0xFF9C(0xCE) = 0x0000
T0REL() @ 0xFE54(0x2A) = 0x0000
T1() @ 0xFE52(0x29) = 0x0000
T1IC(b) @ 0xFF9E(0xCF) = 0x0000
T1REL() @ 0xFE56(0x2B) = 0x0000
T2() @ 0xFE40(0x20) = 0x0000
T2CON(b) @ 0xFF40(0xA0) = 0x0000
T2IC(b) @ 0xFF60(0xB0) = 0x0000
T3() @ 0xFE42(0x21) = 0x0000
T3CON(b) @ 0xFF42(0xA1) = 0x0000
T3IC(b) @ 0xFF62(0xB1) = 0x0000
T4() @ 0xFE44(0x22) = 0x0000
T4CON(b) @ 0xFF44(0xA2) = 0x0000
T4IC(b) @ 0xFF64(0xB2) = 0x0000
T5() @ 0xFE46(0x23) = 0x0000
T5CON(b) @ 0xFF46(0xA3) = 0x0000
T5IC(b) @ 0xFF66(0xB3) = 0x0000
T6() @ 0xFE48(0x24) = 0x0000
T6CON(b) @ 0xFF48(0xA4) = 0x0000
T6IC(b) @ 0xFF68(0xB4) = 0x0000
T78CON(b) @ 0xFF20(0x90) = 0x0000
TFR(b) @ 0xFFAC(0xD6) = 0x0000
WDT() @ 0xFEAE(0x57) = 0x0000
WDTCON(b) @ 0xFFAE(0xD7) = 0x0000
ZEROS(b) @ 0xFF1C(0x8E) = 0x0000
);

def_all_esfr!(
ADDAT2(X) @ 0xF0A0(0x50) = 0x0000
C1BTR(X) @ 0xEF04() = 0x0000
C1CSR(X) @ 0xEF00() = 0x0001
C1GMS(X) @ 0xEF06() = 0x0F00
C1IR(X) @ 0xEF02() = 0x00
C1LAR0(X) @ 0xEF04() = 0x0000
C1LAR1(X) @ 0xEF14() = 0x0000
C1LAR2(X) @ 0xEF24() = 0x0000
C1LAR3(X) @ 0xEF34() = 0x0000
C1LAR4(X) @ 0xEF44() = 0x0000
C1LAR5(X) @ 0xEF54() = 0x0000
C1LAR6(X) @ 0xEF64() = 0x0000
C1LAR7(X) @ 0xEF74() = 0x0000
C1LAR8(X) @ 0xEF84() = 0x0000
C1LAR9(X) @ 0xEF94() = 0x0000
C1LARA(X) @ 0xEFA4() = 0x0000
C1LARB(X) @ 0xEFB4() = 0x0000
C1LARC(X) @ 0xEFC4() = 0x0000
C1LARD(X) @ 0xEFD4() = 0x0000
C1LARE(X) @ 0xEFE4() = 0x0000
C1LARF(X) @ 0xEFF4() = 0x0000
C1LGML(X) @ 0xEF0A() = 0x0000
C1LMLM(X) @ 0xEF0E() = 0x0000
C1MCFG0(X) @ 0xEF06() = 0x0000
C1MCFG1(X) @ 0xEF16() = 0x0000
C1MCFG2(X) @ 0xEF26() = 0x0000
C1MCFG3(X) @ 0xEF36() = 0x0000
C1MCFG4(X) @ 0xEF46() = 0x0000
C1MCFG5(X) @ 0xEF56() = 0x0000
C1MCFG6(X) @ 0xEF66() = 0x0000
C1MCFG7(X) @ 0xEF76() = 0x0000
C1MCFG8(X) @ 0xEF86() = 0x0000
C1MCFG9(X) @ 0xEF96() = 0x0000
C1MCFGA(X) @ 0xEFA6() = 0x0000
C1MCFGB(X) @ 0xEFB6() = 0x0000
C1MCFGC(X) @ 0xEFC6() = 0x0000
C1MCFGD(X) @ 0xEFD6() = 0x0000
C1MCFGE(X) @ 0xEFE6() = 0x0000
C1MCFGF(X) @ 0xEFF6() = 0x0000
C1MCR0(X) @ 0xEF00() = 0x0000
C1MCR1(X) @ 0xEF10() = 0x0000
C1MCR2(X) @ 0xEF20() = 0x0000
C1MCR3(X) @ 0xEF30() = 0x0000
C1MCR4(X) @ 0xEF40() = 0x0000
C1MCR5(X) @ 0xEF50() = 0x0000
C1MCR6(X) @ 0xEF60() = 0x0000
C1MCR7(X) @ 0xEF70() = 0x0000
C1MCR8(X) @ 0xEF80() = 0x0000
C1MCR9(X) @ 0xEF90() = 0x0000
C1MCRA(X) @ 0xEFA0() = 0x0000
C1MCRB(X) @ 0xEFB0() = 0x0000
C1MCRC(X) @ 0xEFC0() = 0x0000
C1MCRD(X) @ 0xEFD0() = 0x0000
C1MCRE(X) @ 0xEFE0() = 0x0000
C1MCRF(X) @ 0xEFF0() = 0x0000
C1UAR0(X) @ 0xEF02() = 0x0000
C1UAR1(X) @ 0xEF12() = 0x0000
C1UAR2(X) @ 0xEF22() = 0x0000
C1UAR3(X) @ 0xEF32() = 0x0000
C1UAR4(X) @ 0xEF42() = 0x0000
C1UAR5(X) @ 0xEF52() = 0x0000
C1UAR6(X) @ 0xEF62() = 0x0000
C1UAR7(X) @ 0xEF72() = 0x0000
C1UAR8(X) @ 0xEF82() = 0x0000
C1UAR9(X) @ 0xEF92() = 0x0000
C1UARA(X) @ 0xEFA2() = 0x0000
C1UARB(X) @ 0xEFB2() = 0x0000
C1UARC(X) @ 0xEFC2() = 0x0000
C1UARD(X) @ 0xEFD2() = 0x0000
C1UARE(X) @ 0xEFE2() = 0x0000
C1UARF(X) @ 0xEFF2() = 0x0000
C1UGML(X) @ 0xEF08() = 0x0000
C1UMLM(X) @ 0xEF0C() = 0x0000
CC16IC(b,X) @ 0xF160(0xB0) = 0x0000
CC17IC(b,X) @ 0xF162(0xB1) = 0x0000
CC18IC(b,X) @ 0xF164(0xB2) = 0x0000
CC19IC(b,X) @ 0xF166(0xB3) = 0x0000
CC20IC(b,X) @ 0xF168(0xB4) = 0x0000
CC21IC(b,X) @ 0xF16A(0xB5) = 0x0000
CC22IC(b,X) @ 0xF16C(0xB6) = 0x0000
CC23IC(b,X) @ 0xF16E(0xB7) = 0x0000
CC24IC(b,X) @ 0xF170(0xB8) = 0x0000
CC25IC(b,X) @ 0xF172(0xB9) = 0x0000
CC26IC(b,X) @ 0xF174(0xBA) = 0x0000
CC27IC(b,X) @ 0xF176(0xBB) = 0x0000
CC28IC(b,X) @ 0xF178(0xBC) = 0x0000
CC29IC(b,X) @ 0xF184(0xC2) = 0x0000
CC30IC(b,X) @ 0xF18C(0xC6) = 0x0000
CC31IC(b,X) @ 0xF194(0xCA) = 0x0000
DP0H(b,X) @ 0xF102(0x81) = 0x00
DP0L(b,X) @ 0xF100(0x80) = 0x00
DP1H(b,X) @ 0xF106(0x83) = 0x00
DP1L(b,X) @ 0xF104(0x82) = 0x00
EXICON(b,X) @ 0xF1C0(0xE0) = 0x0000
ODP2(b,X) @ 0xF1C2(0xE1) = 0x0000
ODP3(b,X) @ 0xF1C6(0xE3) = 0x0000
ODP6(b,X) @ 0xF1CE(0xE7) = 0x00
ODP7(b,X) @ 0xF1D2(0xE9) = 0x00
ODP8(b,X) @ 0xF1D6(0xEB) = 0x00
PDCR(X) @ 0xF0AA(0x55) = 0x0000
PICON(X) @ 0xF1C4(0xE2) = 0x0000
PP0(X) @ 0xF038(0x1C) = 0x0000
PP1(X) @ 0xF03A(0x1D) = 0x0000
PP2(X) @ 0xF03C(0x1E) = 0x0000
PP3(X) @ 0xF03E(0x1F) = 0x0000
PT0(X) @ 0xF030(0x18) = 0x0000
PT1(X) @ 0xF032(0x19) = 0x0000
PT2(X) @ 0xF034(0x1A) = 0x0000
PT3(X) @ 0xF036(0x1B) = 0x0000
PWMIC(b,X) @ 0xF17E(0xBF) = 0x0000
RP0H(b,X) @ 0xF108(0x84) = 0x00
S0TBIC(b,X) @ 0xF19C(0xCE) = 0x0000
SSCBR(X) @ 0xF0B4(0x5A) = 0x0000
SSCRB(X) @ 0xF0B2(0x59) = 0x0000
SSCTB(X) @ 0xF0B0(0x58) = 0x0000
T7IC(b,X) @ 0xF17A(0xBD) = 0x0000
T7REL(X) @ 0xF054(0x2A) = 0x0000
T7(X) @ 0xF050(0x28) = 0x0000
T8IC(b,X) @ 0xF17C(0xBE) = 0x0000
T8REL(X) @ 0xF056(0x2B) = 0x0000
T8(X) @ 0xF052(0x29) = 0x0000
XP0IC(b,X) @ 0xF186(0xC3) = 0x0000
XP1IC(b,X) @ 0xF18E(0xC7) = 0x0000
XP2IC(b,X) @ 0xF196(0xCB) = 0x0000
XP3IC(b,X) @ 0xF19E(0xCF) = 0x0000
);
